from langchain_ollama.llms import OllamaLLM
from langchain_core.prompts import ChatPromptTemplate

from restaurant_db import RestaurantReviewDatabase


class RestaurantChatbot:
    """
    A class for answering questions about a pizza restaurant based on provided reviews.
    """

    def __init__(self, model_name="llama3.2"):
        """
        Initializes the PizzaRestaurantQA with an Ollama language model
        and a chat prompt template.

        Args:
            model_name (str): The name of the Ollama language model to use.
        """
        self.model = OllamaLLM(model=model_name)
        self.template = """
            You are an expert in answering questions about a pizza restaurant

            Here are some relevant reviews: {reviews}

            Here is the question to answer: {question}
            """
        self.prompt = ChatPromptTemplate.from_template(self.template)
        self.chain = self.prompt | self.model

    def answer_question(self, question, reviews):
        """
        Answers a question about the pizza restaurant based on the provided reviews.

        Args:
            question (str): The question to answer.
            reviews (str): A string containing relevant reviews.

        Returns:
            str: The answer generated by the language model.
        """
        result = self.chain.invoke({"reviews": reviews, "question": question})
        return result


def main():
    """
    Main function to interact with the PizzaRestaurantQA class.
    """
    restaurant_bot = RestaurantChatbot()
    restaurant_db = RestaurantReviewDatabase(csv_filepath="realistic_restaurant_reviews.csv")

    # Assuming 'retriever' is defined elsewhere and can be used here
    retriever = restaurant_db.get_retriever()

    while True:
        print("\n\n-------------------------------")
        question = input("Ask your question (q to quit): ")
        print("\n\n")
        if question == "q":
            break

        reviews = retriever.invoke(question)
        answer = restaurant_bot.answer_question(question, reviews)
        print(answer)


if __name__ == "__main__":
    main()
